/* The following code was generated by JFlex 1.6.1 */

package Backend.CupYFlex;
import java_cup.runtime.* ;
import java_cup.runtime.Symbol;
import Backend.CupYFlex.sym;
import java.util.ArrayList;

/*-------------- Declaraciones ------------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\113\1\10\1\12\1\12\1\11\22\0\1\66\1\110\1\4"+
    "\1\73\1\3\1\30\1\111\1\5\1\51\1\52\1\76\1\74\1\105"+
    "\1\75\1\47\1\7\12\1\1\104\1\6\1\106\1\77\1\107\1\0"+
    "\1\3\1\34\1\32\1\46\1\56\1\62\1\61\1\41\1\2\1\63"+
    "\1\33\1\2\1\50\1\42\1\64\1\40\1\35\1\2\1\37\1\54"+
    "\1\60\1\2\1\31\1\53\1\2\1\36\1\2\1\103\1\0\1\102"+
    "\1\0\1\3\1\0\1\20\1\55\1\25\1\45\1\16\1\17\1\67"+
    "\1\26\1\23\1\2\1\72\1\21\1\57\1\24\1\27\1\44\1\2"+
    "\1\14\1\22\1\13\1\15\1\71\1\43\1\65\1\70\1\2\1\100"+
    "\1\112\1\101\7\0\1\12\113\0\1\2\37\0\1\2\u1f36\0\1\12"+
    "\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\16\1\1\7\1\10\14\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\1\1\26\3\0\16\26\1\0\1\27"+
    "\4\26\1\30\12\26\1\31\2\26\1\32\2\26\1\33"+
    "\2\26\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\0\4\26\1\42\1\26\1\43\1\26\1\0\1\26"+
    "\1\44\3\26\1\45\2\26\3\0\3\26\1\46\4\26"+
    "\1\47\4\26\1\50\2\26\1\51\1\52\2\26\2\0"+
    "\1\53\1\54\1\55\4\26\1\0\2\26\1\56\1\26"+
    "\1\57\1\26\1\60\1\0\1\61\1\0\4\26\1\62"+
    "\1\26\1\63\5\26\1\64\1\65\1\66\1\67\1\0"+
    "\1\70\1\71\1\72\1\26\1\73\1\0\2\26\1\74"+
    "\1\26\2\0\1\75\1\76\3\26\1\77\3\26\1\100"+
    "\1\0\1\101\1\0\1\102\2\26\1\103\1\0\1\104"+
    "\1\105\2\26\1\106\2\26\2\0\2\26\1\0\1\107"+
    "\1\26\1\110\1\26\1\0\1\111\1\26\1\112\1\0"+
    "\2\26\1\113\2\0\3\26\1\114\1\115\12\26\1\116"+
    "\12\26\1\0\1\117\1\26\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\114\0\u01c8"+
    "\0\u0214\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\114"+
    "\0\114\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850"+
    "\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\114\0\114\0\114"+
    "\0\u0a18\0\114\0\114\0\114\0\114\0\114\0\114\0\u0a64"+
    "\0\u0ab0\0\114\0\u0afc\0\u0b48\0\344\0\u0b94\0\u0be0\0\u0c2c"+
    "\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0df4\0\u0e40\0\u0e8c"+
    "\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\344"+
    "\0\u10ec\0\u1138\0\u1184\0\u11d0\0\344\0\u121c\0\u1268\0\u12b4"+
    "\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\344"+
    "\0\u1514\0\u1560\0\344\0\u15ac\0\u15f8\0\344\0\u1644\0\u1690"+
    "\0\u16dc\0\114\0\114\0\114\0\114\0\114\0\114\0\u1728"+
    "\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\344\0\u18f0\0\344"+
    "\0\u193c\0\u1988\0\u19d4\0\344\0\u1a20\0\u1a6c\0\u1ab8\0\344"+
    "\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18"+
    "\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\344\0\u1ee0\0\u1f2c"+
    "\0\u1f78\0\u1fc4\0\344\0\u2010\0\u205c\0\344\0\344\0\u20a8"+
    "\0\u20f4\0\u2140\0\u218c\0\114\0\344\0\344\0\u21d8\0\u2224"+
    "\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\344\0\u23ec\0\344"+
    "\0\u2438\0\114\0\u2484\0\114\0\u24d0\0\u251c\0\u2568\0\u25b4"+
    "\0\u2600\0\344\0\u264c\0\344\0\u2698\0\u26e4\0\u2730\0\u277c"+
    "\0\u27c8\0\344\0\344\0\344\0\344\0\u2814\0\114\0\344"+
    "\0\344\0\u2860\0\344\0\u28ac\0\u28f8\0\u2944\0\344\0\u2990"+
    "\0\u29dc\0\u2a28\0\344\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\344"+
    "\0\u2ba4\0\u2bf0\0\u2c3c\0\344\0\u2c88\0\344\0\u2cd4\0\344"+
    "\0\u2d20\0\u2d6c\0\114\0\u2db8\0\344\0\344\0\u2e04\0\u2e50"+
    "\0\344\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u3064"+
    "\0\344\0\u30b0\0\344\0\u30fc\0\u3148\0\114\0\u3194\0\344"+
    "\0\u31e0\0\u322c\0\u3278\0\114\0\u32c4\0\u3310\0\u335c\0\u33a8"+
    "\0\u33f4\0\114\0\114\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570"+
    "\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0"+
    "\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30"+
    "\0\u3a7c\0\344\0\u3ac8\0\114\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\2\11\1\0\1\12\2\4\1\13\1\14\2\4\1\15"+
    "\1\16\1\17\1\20\2\4\1\21\3\4\1\22\6\4"+
    "\1\23\1\24\1\25\1\26\1\2\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\4\1\11\2\4\1\44\1\4\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\11"+
    "\115\0\1\3\113\0\3\65\7\0\36\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\2\0\10\66"+
    "\3\0\101\66\6\0\1\67\114\0\1\70\114\0\2\11"+
    "\54\0\1\11\24\0\1\11\1\0\3\65\7\0\1\65"+
    "\1\71\34\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\6\65\1\72\27\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\5\65\1\73\1\74\5\65\1\75"+
    "\21\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\30\65\1\76\5\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\11\65\1\77\24\65\2\0\4\65\1\100"+
    "\6\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\3\65\1\101\32\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\5\65\1\102\1\103\1\65\1\104\2\65\1\105\1\106"+
    "\21\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\32\0\1\107\64\0\3\65\7\0\7\65\1\110"+
    "\26\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\13\65\1\111\22\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\1\65\1\112\1\113\33\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\3\65\1\114\10\65\1\115\21\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\5\65\1\116\6\65\1\117\21\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\14\65\1\120\21\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\13\65"+
    "\1\121\22\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\2\65\1\122\1\123"+
    "\6\65\1\124\23\65\2\0\13\65\1\0\1\65\1\125"+
    "\3\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\1\65\1\126\34\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\10\65\1\127"+
    "\3\65\1\130\21\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\5\65\1\131"+
    "\30\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\13\65\1\132\1\133\21\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\14\65\1\134\21\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\6\65\1\72\2\65\1\135\24\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\4\65\1\136\31\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\3\65"+
    "\1\137\32\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\14\65\1\140\21\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\25\0\1\141\167\0\1\142\113\0\1\143\113\0\1\144"+
    "\125\0\1\145\114\0\1\146\5\0\1\147\111\0\1\150"+
    "\10\0\15\150\1\0\16\150\1\0\1\150\2\0\13\150"+
    "\1\0\4\150\21\0\10\151\3\0\101\151\1\0\3\65"+
    "\7\0\2\65\1\152\33\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\7\65"+
    "\1\153\26\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\6\65\1\154\27\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\14\65\1\155\21\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\1\65\1\156\34\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\10\65"+
    "\1\157\25\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\1\160\30\65\1\161"+
    "\4\65\2\0\13\65\1\162\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\31\65\1\163\4\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\30\65\1\164\5\65\2\0\12\65\1\165"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\7\65\1\166\26\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\5\65"+
    "\1\167\30\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\11\65\1\170\24\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\5\65\1\171\30\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\11\65\1\172\24\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\33\0\1\173\1\0\1\174"+
    "\1\0\1\175\57\0\3\65\7\0\10\65\1\176\25\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\10\65\1\177\25\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\36\65\2\0\2\65\1\200\10\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\4\65"+
    "\1\201\31\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\7\65\1\202\26\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\11\65\1\203\24\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\14\65\1\204\21\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\10\65"+
    "\1\205\25\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\36\65\2\0\2\65"+
    "\1\206\10\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\6\65\1\207\27\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\5\65\1\210\30\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\7\65"+
    "\1\211\26\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\3\65\1\212\32\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\36\65\2\0\4\65\1\213\6\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\10\65\1\214\25\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\3\65"+
    "\1\215\32\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\1\65\1\216\34\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\32\65\1\217\3\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\36\65\2\0\12\65\1\220\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\10\65\1\221"+
    "\25\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\26\0\1\222\74\0\1\223\116\0\1\224\104\0"+
    "\3\65\7\0\3\65\1\225\32\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\3\65\1\226\32\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\7\65\1\227"+
    "\26\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\5\65\1\230\30\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\1\231\35\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\2\65"+
    "\1\232\33\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\16\0\1\233\100\0\3\65\7\0\14\65"+
    "\1\234\21\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\1\235\35\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\3\65\1\236\32\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\7\65\1\237\26\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\1\65\1\240"+
    "\34\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\1\241\35\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\34\0\1\242"+
    "\115\0\1\243\115\0\1\244\1\245\55\0\3\65\7\0"+
    "\6\65\1\246\27\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\11\65\1\247"+
    "\24\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\6\65\1\250\27\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\5\65\1\251\30\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\3\65\1\252\32\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\7\65\1\253"+
    "\26\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\31\65\1\254\4\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\6\65\1\255\27\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\3\65\1\256\32\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\11\65\1\257"+
    "\24\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\1\260\35\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\5\65\1\261\30\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\11\65"+
    "\1\262\24\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\11\65\1\263\24\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\1\264\35\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\32\65\1\265\3\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\27\0\1\266\74\0\1\267\106\0"+
    "\3\65\7\0\3\65\1\270\32\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\1\271\35\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\12\65\1\272\23\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\1\273\35\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\22\0\1\274\74\0"+
    "\3\65\7\0\1\65\1\275\34\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\35\65\1\276\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\7\65\1\277\26\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\10\65\1\300\25\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\33\0\1\301"+
    "\122\0\1\302\54\0\3\65\7\0\3\65\1\303\32\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\1\304\35\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\10\65\1\305\25\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\2\65\1\306"+
    "\33\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\14\65\1\307\21\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\3\65\1\310\32\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\12\65\1\311\23\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\11\65\1\312"+
    "\24\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\3\65\1\313\32\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\36\65\2\0\13\65\1\0\3\65\1\314"+
    "\1\65\2\0\1\65\12\0\1\65\23\0\1\315\73\0"+
    "\3\65\7\0\13\65\1\316\22\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\26\0\1\317\70\0"+
    "\3\65\7\0\1\320\35\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\10\65"+
    "\1\321\25\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\11\65\1\322\24\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\36\0\1\323\120\0\1\324\53\0\3\65\7\0\4\65"+
    "\1\325\31\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\12\65\1\326\23\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\6\65\1\327\27\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\6\65\1\330\27\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\1\331"+
    "\35\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\3\65\1\332\32\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\36\65\2\0\4\65\1\333\6\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\17\0\1\334\165\0"+
    "\1\335\25\0\3\65\7\0\11\65\1\336\24\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\2\65\1\337\33\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\41\0\1\340\55\0"+
    "\3\65\7\0\1\341\35\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\3\65"+
    "\1\342\32\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\1\65\1\343\34\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\34\65\1\344\1\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\47\0\1\345"+
    "\64\0\1\346\76\0\3\65\7\0\3\65\1\347\32\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\3\65\1\350\32\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\36\0\1\351"+
    "\60\0\3\65\7\0\34\65\1\352\1\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\14\65\1\353\21\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\20\0\1\354\76\0\3\65"+
    "\7\0\36\65\1\355\1\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\44\0\1\356\52\0\3\65\7\0"+
    "\24\65\1\357\11\65\2\0\1\360\12\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\2\65"+
    "\1\361\33\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\54\0\1\362\75\0\1\363\60\0\3\65"+
    "\7\0\3\65\1\364\32\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\1\65"+
    "\1\365\34\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\1\366\35\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\5\65\1\367\30\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\10\65\1\370\25\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\34\65\1\371"+
    "\1\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\32\65\1\372\3\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\1\373\35\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\31\65"+
    "\1\374\4\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\35\65\1\375\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\3\65\1\376\32\65\2\0\13\65\1\0"+
    "\5\65\2\0\1\65\12\0\1\65\3\0\3\65\7\0"+
    "\1\65\1\377\34\65\2\0\13\65\1\0\5\65\2\0"+
    "\1\65\12\0\1\65\3\0\3\65\7\0\10\65\1\u0100"+
    "\25\65\2\0\13\65\1\0\5\65\2\0\1\65\12\0"+
    "\1\65\3\0\3\65\7\0\35\65\1\u0101\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\10\65\1\u0102\25\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\11\65"+
    "\1\u0103\24\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\10\65\1\u0104\25\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\3\0\3\65\7\0\11\65\1\u0105\24\65\2\0\13\65"+
    "\1\0\5\65\2\0\1\65\12\0\1\65\3\0\3\65"+
    "\7\0\3\65\1\u0106\32\65\2\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\11\65"+
    "\1\u0107\24\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\1\u0108\35\65\2\0"+
    "\13\65\1\0\5\65\2\0\1\65\12\0\1\65\3\0"+
    "\3\65\7\0\36\65\1\u0109\1\0\13\65\1\0\5\65"+
    "\2\0\1\65\12\0\1\65\3\0\3\65\7\0\3\65"+
    "\1\u010a\32\65\2\0\13\65\1\0\5\65\2\0\1\65"+
    "\12\0\1\65\3\0\3\65\7\0\6\65\1\u010b\27\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\54\0\1\u010c\42\0\3\65\7\0\11\65\1\u010d\24\65"+
    "\2\0\13\65\1\0\5\65\2\0\1\65\12\0\1\65"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15124];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\20\1\2\11\14\1\3\11"+
    "\1\1\6\11\2\1\1\11\3\1\3\0\16\1\1\0"+
    "\31\1\1\0\6\11\2\0\10\1\1\0\10\1\3\0"+
    "\24\1\2\0\1\11\6\1\1\0\6\1\1\11\1\0"+
    "\1\11\1\0\20\1\1\0\1\11\4\1\1\0\4\1"+
    "\2\0\12\1\1\0\1\1\1\0\3\1\1\11\1\0"+
    "\7\1\2\0\2\1\1\0\4\1\1\0\1\11\2\1"+
    "\1\0\2\1\1\11\2\0\3\1\2\11\25\1\1\0"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol symbol(int type, Object value, int fila, int columna) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println( "Caracter no reconocido: "+ yytext());
            }
          case 82: break;
          case 2: 
            { System.out.println( "numero...."+ yytext() ); return symbol(sym.NUMERO, yytext(), yyline, yycolumn);
            }
          case 83: break;
          case 3: 
            { System.out.println( "comilla...."+ yytext() ); return symbol(sym.COMILLA, yytext(), yyline, yycolumn);
            }
          case 84: break;
          case 4: 
            { System.out.println( "punto y coma..." +  yytext());return symbol(sym.PUNTOYCOMA , yytext(), yyline, yycolumn);
            }
          case 85: break;
          case 5: 
            { System.out.println( "SIM DIVISION...."+ yytext() ); return symbol(sym.DIV, yytext(), yyline, yycolumn);
            }
          case 86: break;
          case 6: 
            { /*IGNORAR*/
            }
          case 87: break;
          case 7: 
            { System.out.println( "parAbre...."+ yytext() ); return symbol(sym.PARABRE, yytext(), yyline, yycolumn);
            }
          case 88: break;
          case 8: 
            { System.out.println( "parCierra...."+ yytext() ); return symbol(sym.PARCIERRA, yytext(), yyline, yycolumn);
            }
          case 89: break;
          case 9: 
            { System.out.println( "SIM MAS...."+ yytext() ); return symbol(sym.SIMMAS, yytext(), yyline, yycolumn);
            }
          case 90: break;
          case 10: 
            { System.out.println( "SIM MENOS...."+ yytext() ); return symbol(sym.SIMMENOS, yytext(), yyline, yycolumn);
            }
          case 91: break;
          case 11: 
            { System.out.println( "SIM MULTIPLICACION...."+ yytext() ); return symbol(sym.MULTI, yytext(), yyline, yycolumn);
            }
          case 92: break;
          case 12: 
            { System.out.println( "SIM IGUAL...."+ yytext() ); return symbol(sym.SIMIGUAL, yytext(), yyline, yycolumn);
            }
          case 93: break;
          case 13: 
            { System.out.println( "llaveAbre..." +  yytext()); return symbol(sym.LLAVEABRE , yytext(), yyline, yycolumn);
            }
          case 94: break;
          case 14: 
            { System.out.println( "llaveCierra..." +  yytext()); return symbol(sym.LLAVECIERRA , yytext(), yyline, yycolumn);
            }
          case 95: break;
          case 15: 
            { System.out.println( "corAbre... " +  yytext());return symbol(sym.CORCHETECIERRA, yytext(), yyline, yycolumn);
            }
          case 96: break;
          case 16: 
            { System.out.println( "corCierra...."+ yytext() ); return symbol(sym.CORCHETEABRE, yytext(), yyline, yycolumn);
            }
          case 97: break;
          case 17: 
            { System.out.println( "dospuntos...."+ yytext() ); return symbol(sym.DOSPUNTOS, yytext(), yyline, yycolumn);
            }
          case 98: break;
          case 18: 
            { System.out.println( "coma...."+ yytext() ); return symbol(sym.COMA, yytext(), yyline, yycolumn);
            }
          case 99: break;
          case 19: 
            { System.out.println( "MENOR...."+ yytext() ); return symbol(sym.MENOR, yytext(), yyline, yycolumn);
            }
          case 100: break;
          case 20: 
            { System.out.println( "MAYOR...."+ yytext() ); return symbol(sym.MAYOR, yytext(), yyline, yycolumn);
            }
          case 101: break;
          case 21: 
            { System.out.println( "NOT...."+ yytext() ); return symbol(sym.NOT, yytext(), yyline, yycolumn);
            }
          case 102: break;
          case 22: 
            { System.out.println( "ID..." +  yytext());return symbol(sym.ID, yytext(), yyline, yycolumn);
            }
          case 103: break;
          case 23: 
            { System.out.println( "declaracion ASID..." +  yytext());
                                        return symbol(sym.ASID , yytext(), yyline, yycolumn);
            }
          case 104: break;
          case 24: 
            { System.out.println( "declaracion DOID..." +  yytext());
                                        return symbol(sym.DOID , yytext(), yyline, yycolumn);
            }
          case 105: break;
          case 25: 
            { System.out.println( "declaracion DOIDVB..." +  yytext());
                                        return symbol(sym.DOIDVB , yytext(), yyline, yycolumn);
            }
          case 106: break;
          case 26: 
            { System.out.println( "declaracion TOID..." +  yytext());
                                        return symbol(sym.TOID , yytext(), yyline, yycolumn);
            }
          case 107: break;
          case 27: 
            { System.out.println( "declaracion IFIDVB..." +  yytext());
                                        return symbol(sym.IFIDVB , yytext(), yyline, yycolumn);
            }
          case 108: break;
          case 28: 
            { System.out.println( "IGUAL...."+ yytext() ); return symbol(sym.IGUAL, yytext(), yyline, yycolumn);
            }
          case 109: break;
          case 29: 
            { System.out.println( "MENORIGUAL...."+ yytext()); return symbol(sym.MENORIGUAL, yytext(), yyline, yycolumn);
            }
          case 110: break;
          case 30: 
            { System.out.println( "MAYORIGUAL...."+ yytext()); return symbol(sym.MAYORIGUAL, yytext(), yyline, yycolumn);
            }
          case 111: break;
          case 31: 
            { System.out.println( "AND...."+ yytext() ); return symbol(sym.AND, yytext(), yyline, yycolumn);
            }
          case 112: break;
          case 32: 
            { System.out.println( "OR...."+ yytext() ); return symbol(sym.OR, yytext(), yyline, yycolumn);
            }
          case 113: break;
          case 33: 
            { System.out.println( "STRING..." +  yytext());return symbol(sym.STRING, yytext(), yyline, yycolumn);
            }
          case 114: break;
          case 34: 
            { System.out.println( "declaracion FORID..." +  yytext());
                                        return symbol(sym.FORID , yytext(), yyline, yycolumn);
            }
          case 115: break;
          case 35: 
            { System.out.println( "intid..." +  yytext());
                                        return symbol(sym.INTID , yytext(), yyline, yycolumn);
            }
          case 116: break;
          case 36: 
            { System.out.println( "declaracion NEWID..." +  yytext());
                                        return symbol(sym.NEWID , yytext(), yyline, yycolumn);
            }
          case 117: break;
          case 37: 
            { System.out.println( "cinId..." +  yytext());
                                        return symbol(sym.CINID , yytext(), yyline, yycolumn);
            }
          case 118: break;
          case 38: 
            { System.out.println( "declaracion DEFID..." +  yytext());
                                        return symbol(sym.DEFID , yytext(), yyline, yycolumn);
            }
          case 119: break;
          case 39: 
            { System.out.println( "declaracion SUBID..." +  yytext());
                                        return symbol(sym.SUBID , yytext(), yyline, yycolumn);
            }
          case 120: break;
          case 40: 
            { System.out.println( "declaracion DIMID..." +  yytext());
                                        return symbol(sym.DIMID , yytext(), yyline, yycolumn);
            }
          case 121: break;
          case 41: 
            { System.out.println( "declaracion FORIDVB..." +  yytext());
                                        return symbol(sym.FORIDVB , yytext(), yyline, yycolumn);
            }
          case 122: break;
          case 42: 
            { System.out.println( "declaracion ENDID..." +  yytext());
                                        return symbol(sym.ENDID , yytext(), yyline, yycolumn);
            }
          case 123: break;
          case 43: 
            { System.out.println( "comentarioSimple..." +  yytext());
            }
          case 124: break;
          case 44: 
            { System.out.println( "true..." +  yytext());
                                        return symbol(sym.TRUE , yytext(), yyline, yycolumn);
            }
          case 125: break;
          case 45: 
            { System.out.println( "declaracion ELSEID..." +  yytext());
                                        return symbol(sym.ELSEID , yytext(), yyline, yycolumn);
            }
          case 126: break;
          case 46: 
            { System.out.println( "declaracion CASEID..." +  yytext());
                                        return symbol(sym.CASEID , yytext(), yyline, yycolumn);
            }
          case 127: break;
          case 47: 
            { System.out.println( "charid..." +  yytext());
                                        return symbol(sym.CHARID , yytext(), yyline, yycolumn);
            }
          case 128: break;
          case 48: 
            { System.out.println( "declaracion VBID..." +  yytext());
                                        return symbol(sym.VBID , yytext(), yyline, yycolumn);
            }
          case 129: break;
          case 49: 
            { System.out.println( "declaracion PYID..." +  yytext());
                                        return symbol(sym.PYID , yytext(), yyline, yycolumn);
            }
          case 130: break;
          case 50: 
            { System.out.println( "declaracion CASEVBID..." +  yytext());
                                        return symbol(sym.CASEVBID , yytext(), yyline, yycolumn);
            }
          case 131: break;
          case 51: 
            { System.out.println( "declaracion LOOPID..." +  yytext());
                                        return symbol(sym.LOOPID , yytext(), yyline, yycolumn);
            }
          case 132: break;
          case 52: 
            { System.out.println( "MAINID..." +  yytext());
                                        return symbol(sym.MAINID , yytext(), yyline, yycolumn);
            }
          case 133: break;
          case 53: 
            { System.out.println( "declaracion THENID..." +  yytext());
                                        return symbol(sym.THENID , yytext(), yyline, yycolumn);
            }
          case 134: break;
          case 54: 
            { System.out.println( "declaracion NEXTID..." +  yytext());
                                        return symbol(sym.NEXTID , yytext(), yyline, yycolumn);
            }
          case 135: break;
          case 55: 
            { System.out.println( "declaracion VOIDID..." +  yytext());
                                        return symbol(sym.VOIDID , yytext(), yyline, yycolumn);
            }
          case 136: break;
          case 56: 
            { System.out.println( "CHAR..." +  yytext());return symbol(sym.CHAR, yytext(), yyline, yycolumn);
            }
          case 137: break;
          case 57: 
            { System.out.println( "false..." +  yytext());
                                        return symbol(sym.FALSE , yytext(), yyline, yycolumn);
            }
          case 138: break;
          case 58: 
            { System.out.println( "floatid..." +  yytext());
                                        return symbol(sym.FLOATID , yytext(), yyline, yycolumn);
            }
          case 139: break;
          case 59: 
            { System.out.println( "declaracion INPUTID..." +  yytext());
                                        return symbol(sym.INPUTID , yytext(), yyline, yycolumn);
            }
          case 140: break;
          case 60: 
            { System.out.println( "declaracion CLASSID..." +  yytext());
                                        return symbol(sym.CLASSID , yytext(), yyline, yycolumn);
            }
          case 141: break;
          case 61: 
            { System.out.println( "declaracion WHILEID..." +  yytext());
                                        return symbol(sym.WHILEID , yytext(), yyline, yycolumn);
            }
          case 142: break;
          case 62: 
            { System.out.println( "declaracion PRINTID..." +  yytext());
                                        return symbol(sym.PRINTID , yytext(), yyline, yycolumn);
            }
          case 143: break;
          case 63: 
            { System.out.println( "declaracion WHILEIDVB..." +  yytext());
                                        return symbol(sym.WHILEIDVB , yytext(), yyline, yycolumn);
            }
          case 144: break;
          case 64: 
            { System.out.println( "declaracion BREAKID..." +  yytext());
                                        return symbol(sym.BREAKID , yytext(), yyline, yycolumn);
            }
          case 145: break;
          case 65: 
            { System.out.println( "declaracion SWITCHID..." +  yytext());
                                        return symbol(sym.SWITCHID , yytext(), yyline, yycolumn);
            }
          case 146: break;
          case 66: 
            { System.out.println( "declaracion IMPORTID..." +  yytext());
                                        return symbol(sym.IMPORTID , yytext(), yyline, yycolumn);
            }
          case 147: break;
          case 67: 
            { System.out.println( "declaracion JAVAID..." +  yytext());
                                        return symbol(sym.JAVAID , yytext(), yyline, yycolumn);
            }
          case 148: break;
          case 68: 
            { System.out.println( "printfid..." +  yytext());
                                        return symbol(sym.PRINFID , yytext(), yyline, yycolumn);
            }
          case 149: break;
          case 69: 
            { System.out.println( "declaracion PUBLICID..." +  yytext());
                                        return symbol(sym.PUBLICID , yytext(), yyline, yycolumn);
            }
          case 150: break;
          case 70: 
            { System.out.println( "declaracion SELECTID..." +  yytext());
                                        return symbol(sym.SELECTID , yytext(), yyline, yycolumn);
            }
          case 151: break;
          case 71: 
            { System.out.println( "declaracion DEFAULTID..." +  yytext());
                                        return symbol(sym.DEFAULTID , yytext(), yyline, yycolumn);
            }
          case 152: break;
          case 72: 
            { System.out.println( "declaracion SCANNERID..." +  yytext());
                                        return symbol(sym.SCANNERID , yytext(), yyline, yycolumn);
            }
          case 153: break;
          case 73: 
            { System.out.println( "declaracion INRANGEID..." +  yytext());
                                        return symbol(sym.INRANGEID , yytext(), yyline, yycolumn);
            }
          case 154: break;
          case 74: 
            { System.out.println( "declaracion CONTINUEID..." +  yytext());
                                        return symbol(sym.CONTINUEID , yytext(), yyline, yycolumn);
            }
          case 155: break;
          case 75: 
            { System.out.println( "declaracion INCLUDEID..." +  yytext());
                                        return symbol(sym.INCLUDEID , yytext(), yyline, yycolumn);
            }
          case 156: break;
          case 76: 
            { System.out.println( "declaracion NEXTLINEID..." +  yytext());
                                        return symbol(sym.NEXTLINEID , yytext(), yyline, yycolumn);
            }
          case 157: break;
          case 77: 
            { System.out.println( "declaracion PROGRAMAID..." +  yytext());
                                        return symbol(sym.PROGRAMAID , yytext(), yyline, yycolumn);
            }
          case 158: break;
          case 78: 
            { System.out.println( "declaracion CONSOLEWRITEID..." +  yytext());
                                        return symbol(sym.CONSOLEWRITEID , yytext(), yyline, yycolumn);
            }
          case 159: break;
          case 79: 
            { System.out.println( "declaracion WRITELNID..." +  yytext());
                                        return symbol(sym.WRITELNID , yytext(), yyline, yycolumn);
            }
          case 160: break;
          case 80: 
            { System.out.println( "declaracion CONSOLEREADID..." +  yytext());
                                        return symbol(sym.CONSOLEREADID , yytext(), yyline, yycolumn);
            }
          case 161: break;
          case 81: 
            { System.out.println( "declaracion SOUTID..." +  yytext());
                                        return symbol(sym.SOUTID , yytext(), yyline, yycolumn);
            }
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
